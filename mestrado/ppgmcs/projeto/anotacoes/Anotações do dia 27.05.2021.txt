        t1  t2  t3  t4  t5  t6  t7  t8  t9  t10 t11 t12 t13 t14 FX1
D1  H1  p18 p25 p35 p34 p11 p24 p35 p11 p2  p19 p11 p25 p26 p26 7
    H2  p3  p12 p5  p19 p32 p21 p2  p27 p32 p30 p10 p19 p3  p13 4
    H3  p33 p28 p17 p7  p34 p33 p16 p27 p5  p13 p29 p25 p26 p25 3
    H4  p14 p16 p4  p15 p25 p12 p22 p5  p21 p11 p9  p6  p4  p23 2
    H5  p21 p28 p3  p32 p17 p16 p31 p25 p1  p4  p7  p34 p10 p32 2

D2  H1  p32 p30 p35 p24 p17 p29 p25 p29 p12 p30 p35 p25 p35 p6  7
    H2  p34 p3  p1  p2  p26 p20 p20 p11 p7  p35 p32 p5  p29 p6  2
    H3  p35 p1  p34 p32 p8  p10 p23 p20 p20 p17 p19 p27 p4  p22 2
    H4  p17 p16 p7  p29 p11 p15 p33 p1  p29 p3  p16 p29 p5  p19 5
    H5  p2  p30 p23 p31 p18 p9  p12 p14 p6  p9  p11 p33 p24 p30 3

D3  H1  p21 p24 p24 p1  p14 p18 p34 p9  p31 p32 p32 p18 p5  p32 6
    H2  p22 p9  p25 p1  p28 p27 p2  p8  p8  p31 p7  p10 p26 p3  2
    H3  p4  p6  p15 p1  p27 p26 p22 p19 p10 p22 p16 p19 p5  p35 3
    H4  p22 p12 p16 p15 p6  p29 p1  p16 p31 p10 p28 p15 p23 p14 3
    H5  p18 p7  p33 p35 p32 p27 p13 p19 p3  p15 p9  p15 p3  p8  3

D4  H1  p8  p7  p21 p35 p4  p14 p19 p4  p14 p26 p10 p35 p25 p8  5
    H2  p8  p10 p18 p8  p26 p29 p21 p5  p29 p6  p29 p10 p12 p8  8
    H3  p13 p34 p5  p13 p16 p21 p32 p16 p26 p35 p14 p6  p13 p30 5
    H4  p6  p28 p24 p4  p32 p1  p27 p17 p20 p34 p35 p9  p15 p4  2
    H5  p5  p33 p6  p17 p16 p33 p19 p24 p25 p16 p32 p32 p6  p18 5

D5  H1  p7  p11 p32 p33 p22 p35 p8  p33 p20 p1  p4  p33 p30 p25 4
    H2  p28 p14 p33 p26 p15 p25 p32 p32 p8  p5  p19 p24 p27 p31 2
    H3  p21 p27 p25 p4  p17 p33 p27 p32 p20 p23 p29 p13 p4  p13 4
    H4  p31 p18 p34 p18 p29 p13 p9  p31 p5  p15 p17 p25 p17 p31 6
    H5  p23 p8  p17 p8  p15 p31 p13 p19 p1  p4  p9  p22 p2  p5  2



import numpy as np


'''
h: horários
d: dias
t: turmas
p: lista de professores
'''
def newgrade(h, d, t, p):
    grade = np.arange(len(h)*len(d)*len(t)).reshape(len(d), len(h), len(t))
    for i in range(len(d)):
        for j in range(len(h)):
            for k in range(len(t)):
                aleatorio = np.random.choice(p)
                grade[i][j][k] = int(aleatorio)
    return grade
	

[[[10 26 15  2  5 14 21 26  7 15  5 32  3 10]
  [ 7 15 19  8 11  1 17 32 22 32 14 20 27 23]
  [ 5  7 17 33 18 30  2 13 25 24 19 26 17 15]
  [17  0  0  1  4 25  8  1  4 12 18 24 28 21]
  [10 28 11 34 24 10 30 34 11 32  8 11  2  4]]

 [[ 1 31 31 24  1  8 18 21 26  9 10  9 34  5]
  [33  1 16  7 15  6 34 27  2 14  4 29  8  5]
  [ 7  9 31 16  0 13 33 14 15 31 15 17  1  5]
  [ 4 13  0 24 25 22  7 24 12 14 27 32 16 31]
  [26  3 33 24 34  4 20 26 32 26  7 15 18 16]]

 [[21  7 22  2  1 22  7  3 25 20 14 19  4 10]
  [18  0 14 34 24 15 14 20  3  9 25 22  8 19]
  [31  1 31  8 29 17 31  7 17  5 11 32 17 27]
  [ 6 32 28 32  0  6  5 22 15 29 29 10 29 34]
  [13 22  2 21 32 10 25  9  6 19 18 33 12 31]]

 [[24  2 10 30 34 29 17 34 17 23 15  0 16 23]
  [32 33  1  5 31 29 20 21 24 14  0 33 10 22]
  [12 21 30 28 10 25 26 16 20 33  7 31  8 12]
  [32 30 14 30  2 24 28 26 26 25 10 23 31 30]
  [14 25  2 34 18 24  6 24  6  2  7 16 33 29]]

 [[16 32 31 21  3  4  5 17  8 33 13 14 14 17]
  [ 1  9 33  3 33  0 18 26  2 20 30 34 19 13]
  [ 1 31  3 16  1  5 16 18 15  9  2 34 33 29]
  [14 32 32 29 24  5 25  3 19 27 30 18 20 23]
  [19 20  7 23 11 14 32  3 12 32 22  4 23  1]]]
  

P   tm  tv  tn  t1  t2  t3  t4  t5  t6  t7  t8  t9  t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22
1   0   10  6   0   0   0   0   0   0   0   0   0   0   0   0   0   0   5   0   5   0   0   0   3   3
2   0   16  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   3   3   3   3   2   2   0   0
3   4   4   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0   1   1   1   1   0   0   0   0
4   11  2   3   0   0   0   0   2   2   2   2   0   0   0   1   1   1   0   0   0   0   2   0   2   1
5   24  0   0   0   0   0   0   0   0   0   0   4   4   4   4   4   4   0   0   0   0   0   0   0   0
6   8   12  0   2   2   2   2   0   0   0   0   0   0   0   0   0   0   2   2   2   2   2   2   0   0
7   0   8   2   0   0   0   0   0   0   0   0   0   0   0   0   0   0   2   0   2   0   2   2   1   1
8   15  0   0   5   5   0   5   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
9   3   8   0   3   0   0   0   0   0   0   0   0   0   0   0   0   0   3   3   0   0   0   2   0   0
10  16  0   0   0   0   0   0   0   0   0   0   4   4   4   4   0   0   0   0   0   0   0   0   0   0
11  8   8   4   0   0   0   0   2   0   0   0   0   0   0   2   2   2   0   0   0   0   4   4   2   2
12  16  0   0   0   0   0   0   0   0   2   2   2   2   2   2   2   2   0   0   0   0   0   0   0   0
13  21  0   4   0   0   5   0   4   4   4   4   0   0   0   0   0   0   0   0   0   0   0   0   2   2
14  20  0   0   5   5   5   5   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
15  4   4   4   0   0   0   0   0   0   0   0   2   2   0   0   0   0   0   0   0   0   2   2   2   2
16  12  4   0   0   0   0   0   0   2   2   2   2   2   2   0   0   0   0   0   0   0   2   2   0   0
17  16  0   0   0   0   0   0   0   0   2   2   2   2   2   2   2   2   0   0   0   0   0   0   0   0
18  13  8   4   0   3   3   3   2   2   0   0   0   0   0   0   0   0   0   0   3   3   2   0   2   2
19  16  0   4   3   3   3   3   0   0   2   2   0   0   0   0   0   0   0   0   0   0   0   0   2   2
20  8   8   0   0   0   3   3   0   0   2   0   0   0   0   0   0   0   0   0   3   3   2   0   0   0
21  9   2   1   0   0   0   0   0   0   0   0   2   2   2   1   1   1   0   0   0   0   0   2   0   1
22  0   10  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   5   5   0   0   0   0   0   0
23  16  0   0   0   0   0   0   2   2   2   2   0   0   2   2   2   2   0   0   0   0   0   0   0   0
24  16  0   0   0   0   0   0   2   2   0   0   2   2   2   2   2   2   0   0   0   0   0   0   0   0
25*  20  0   2   0   0   0   0   2   2   2   2   2   2   2   2   2   2   0   0   0   0   0   0   1   1
26  14  6   2   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
27  12  4   0   2   2   2   2   2   2   0   0   0   0   0   0   0   0   0   2   0   2   0   0   0   0
28  0   10  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   5   5   0   0   0   0
29  24  0   0   0   0   0   0   4   4   4   4   0   0   0   0   4   4   0   0   0   0   0   0   0   0
30  16  0   4   0   0   0   0   2   2   0   0   2   2   2   2   2   2   0   0   0   0   0   0   2   2
31  8   8   0   3   3   0   0   0   0   0   2   0   0   0   0   0   0   3   3   0   0   0   2   0   0
32  0   18  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   5   0   5   4   4   0   0

tm = 14  # Quantidade de turmas do matutino
tv = 6  # Quantidade de turmas do vespertino
tn = 2  # Quantidade de turmas do noturno

pm = 35  # Quantidade de professores do matutino
pv = 35  # Quantidade de professores do vespertino
pn = 35  # Quantidade de professores do noturno

dsm = 5  # Quantidade de dias da semana com aula matutino
dsv = 5  # Quantidade de dias da semana com aula vespertino
dsn = 5  # Quantidade de dias da semana com aula noturno

hm = 5  # Quantidade de horários diário matutino
hv = 5  # Quantidade de horários diário vespertino
hn = 4  # Quantidade de horários diário noturno


import numpy as np


def hca(grade, d, h, t):
    '''
    Hard Constraint: Sobreposição de horários de aula
    hca(solução, número de dias, número de horários e números de turmas)
    hca: Restrição Hard a) Sobreposição de horários de aula
    i: percorre os dias da semana
    j: percorre os horários do dia
    t: percorre as turmas
    '''
    nota = np.arange(len(d)*len(h)).reshape(len(d), len(h))
    for i in range(len(d)):
        for j in range(len(h)):
            auxiliar = 0
            for k in range(len(t) - 1):
                for w in range(k+1, len(t)):
                    if(grade[i][j][k] == grade[i][j][w]):
                        auxiliar += 1
                nota[i][j] = auxiliar
    return nota